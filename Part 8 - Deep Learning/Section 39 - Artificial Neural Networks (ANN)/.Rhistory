combn(7,5)
combn(3,2)
setwd("C:/Users/darub/Desktop/Machine Learning/machinelearning-az-master/datasets/Part 8 - Deep Learning/Section 39 - Artificial Neural Networks (ANN)")
dataset = read.csv("Churn_Modeling.csv")
setwd("C:/Users/darub/Desktop/Machine Learning/machinelearning-az-master/datasets/Part 8 - Deep Learning/Section 39 - Artificial Neural Networks (ANN)")
dataset = read.csv("Churn_Modeling.csv")
dataset = read.csv("Churn_Modelling.csv")
View(dataset)
dataset = dataset[,3:5]
View(dataset)
View(dataset)
dataset = read.csv("Churn_Modelling.csv")
View(dataset)
View(dataset)
View(dataset)
dataset = dataset[,4:13]
View(dataset)
View(dataset)
View(dataset)
dataset = read.csv("Churn_Modelling.csv")
dataset = dataset[,4:14]
View(dataset)
View(dataset)
setwd("C:/Users/darub/Desktop/Machine Learning/machinelearning-az-master/datasets/Part 8 - Deep Learning/Section 39 - Artificial Neural Networks (ANN)")
dataset = read.csv("Churn_Modelling.csv")
dataset = dataset[,4:14]
# Codificar las variables categoricas
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c("France", "Spain", "Germany"),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c("Female", "Male"),
labels = c(1,2)))
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
training_set[,-11] = scale(training_set[,-11])
testing_set[,-11] = scale(testing_set[,-11])
View(training_set)
View(training_set)
View(training_set)
install.packages("h2o")
library(h2o)
h2o.init(nthreads = -1)
training_set[,11]
classifier = h2o.deeplearning(y = "Exited",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
y_pred = predict(classifier, newdata= testing_set[,11])
y_pred = predict(classifier, newdata= as.h2o(testing_set[,11]))
classifier = h2o.deeplearning(y = "Exited",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
y_pred = h2o.predict(classifier, newdata= testing_set[,11])
y_pred = h2o.predict(classifier, newdata= testing_set[,-11])
classifier = h2o.deeplearning(y = "Exited",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
testing_set[,-11]
dataset = read.csv("Churn_Modelling.csv")
dataset = dataset[,4:14]
# Codificar las variables categoricas
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c("France", "Spain", "Germany"),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c("Female", "Male"),
labels = c(1,2)))
# Dividir los datos de entranamiento y testeo
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
training_set[,-11] = scale(training_set[,-11])
testing_set[,-11] = scale(testing_set[,-11])
# Crear la red neuronal
#install.packages("h2o")
library(h2o)
h2o.init(nthreads = -1)
# activacion rectificador, capa ocultas [6,6]
classifier = h2o.deeplearning(y = "Exited",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
prob_pred = h2o.predict(classifier, newdata= as.h2o(testing_set[,-11]))
y_pred = ifelse(prob_pred > 0.5, 1, 0)
cm = table(testing_set[,11],y_pred)
y_pred
y_pred = (prob_pred > 0.5)
as.c(y_pred)
as.vector(y_pred)
cm = table(testing_set[,11], as.vector(y_pred))
cm
(1523+193)/2000
h2o.shutdown()
h2o.shutdown()
