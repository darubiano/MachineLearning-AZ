combn(7,5)
combn(3,2)
source('C:/Users/darub/Desktop/Machine Learning/machinelearning-az-master/datasets/Part 3 - Classification/Section 19 - Decision Tree Classification/decision tree classification david.R', echo=TRUE)
setwd("C:/Users/darub/Desktop/Machine Learning/machinelearning-az-master/datasets/Part 3 - Classification/Section 19 - Decision Tree Classification")
source('C:/Users/darub/Desktop/Machine Learning/machinelearning-az-master/datasets/Part 3 - Classification/Section 19 - Decision Tree Classification/decision tree classification david.R', echo=TRUE)
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split=TRUE)
testing_set = subset(dataset, split = FALSE)
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
source('C:/Users/darub/Desktop/Machine Learning/machinelearning-az-master/datasets/Part 3 - Classification/Section 19 - Decision Tree Classification/decision tree classification david.R', echo=TRUE)
install.packages('rpart')
library(rpart)
library(rpart)
classifier = rpart(formula = Purchased ~ .,
data = training_set)
# Predecir datos
y_pred = predict(classifier,newdata=testing_set[,-3])
y_pred
y_pred[0]
y_pred[,0]
y_pred[]
y_pred[1]
y_pred = predict(classifier, newdata=testing_set[,-3], type = 'class')
source('C:/Users/darub/Desktop/Machine Learning/machinelearning-az-master/datasets/Part 3 - Classification/Section 19 - Decision Tree Classification/decision tree classification david.R', echo=TRUE)
# ClasificaciÃ³n con Ãrboles de DecisiÃ³n
# Importar el dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Codificar la variable de clasificaciÃ³n como factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar el clasificador con el conjunto de entrenamiento.
#install.packages("rpart")
library(rpart)
classifier = rpart(formula = Purchased ~ .,
data = training_set)
# PredicciÃ³n de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3],
type = "class")
source('C:/Users/darub/Desktop/Machine Learning/machinelearning-az-master/datasets/Part 3 - Classification/Section 19 - Decision Tree Classification/decision tree classification david.R', echo=TRUE)
y_pred
cm = table(testing_set[,-3],y_pred)
cm = table(testing_set[,3],y_pred)
cm
# Visualizacion del conjunto de entrenamiento
#install.packages("ElemStatLearn")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 1)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 500)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set, type = "class")
plot(set[, -3],
main = 'Arbol de decision (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualizacion del conjunto de testing
set = testing_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 1)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 500)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set, type = "class")
plot(set[, -3],
main = 'Arbol de decision (Conjunto de Testing)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.1)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 500)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set, type = "class")
plot(set[, -3],
main = 'Arbol de decision (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
plot(classifier)
text(classifier)
