combn(7,5)
combn(3,2)
setwd("C:/Users/darub/Desktop/Machine Learning/machinelearning-az-master/datasets/Part 9 - Dimensionality Reduction/Section 43 - Principal Component Analysis (PCA)")
dataset = read.csv('Wine.csv')
View(dataset)
dataset = dataset[,1:13]
View(dataset)
View(dataset)
dataset = read.csv('Wine.csv')
dataset = read.csv('Wine.csv')
View(dataset)
library(caTools)
set.seed(123)
#
split = sample.split(dataset$Customer_Segment , SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
training_set[,1:13] = scale(training_set[,1:13])
testing_set[,1:13] = scale(training_set[,1:13])
View(testing_set)
install.packages("caret")
library(caret)
pca = preProcess(x = training_set[,-14], method = "pca", pcaComp = 2 )
View(pca)
View(pca)
training_set = predict(pca, training_set)
View(training_set)
View(pca)
View(training_set)
training_set = training_set[,c(2,3,1)]
View(training_set)
library(ElemStatLearn)
testing_set = predict(pca, testing_set)
View(testing_set)
testing_set = testing_set[,c(2,3,1)]
View(testing_set)
#Ajustar el modelo de regresion logistica
classifier = glm(formula = Customer_Segment ~ .,
data = training_set,
family = binomial)
# Prediccion de los resultados con el conjunto de testing
prob_pred = predict(classifier, type = "response",
newdata = testing_set[,-3])
# vector de predicciones
y_pred = ifelse(prob_pred>0.5,1,0)
# Crear la matriz de confusion
cm = table(testing_set[, 3], y_pred)
# Ajustar el modelo de SVM con el conjunto de entrenamiento.
classifier = svm(formula = Customer_Segment ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
library(e1071)
classifier = svm(formula = Customer_Segment ~ .,
data = training_set,
type = "C-classification",
kernel = "linear")
# PredicciÃ³n de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3])
# Crear la matriz de confusiÃ³n
cm = table(testing_set[, 3], y_pred)
cm
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.025)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.025)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Conjunto de Entrenamiento)',
xlab = 'CP1', ylab = 'CP2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid==2, 'deepskyblue',
ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3]==2, 'blue3',
ifelse(set[, 3] == 1, 'green4', 'red3')))
set = testing_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.02)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.02)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Conjunto de Testing)',
xlab = 'CP1', ylab = 'CP2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid==2, 'deepskyblue',
ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3]==2, 'blue3',
ifelse(set[, 3] == 1, 'green4', 'red3')))
