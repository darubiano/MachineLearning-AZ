combn(7,5)
combn(3,2)
setwd("C:/Users/darub/Desktop/Machine Learning/machinelearning-az-master/datasets/Part 3 - Classification/Section 20 - Random Forest Classification")
dataset = read.csv("Social_Network_Ads.csv")
View(dataset)
dataset = dataset[,3:5]
View(dataset)
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[,3:5]
#Codificar la variable a factor lo toma asi naiveBayes valores de 0 o 1
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Dividir los datos de entranamiento y testeo
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split=TRUE)
testing_set = subset(dataset, split = FALSE)
install.packages('ramdonForest')
library(ramdonForest)
training_set[,-3]
classifier = randomForest(x = training_set[,-3],
y = training_set$Purchased,
ntree = 10)
library(randomForest)
classifier = ramdonForest(x = training_set[,-3],
y = training_set$Purchased,
ntree = 10)
library(ramdonForest)
install.packages('ramdonForest')
library(ramdonForest)
detach("package:randomForest", unload = TRUE)
library(randomForest)
# Importar el dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Codificar la variable de clasificaciÃ³n como factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
# Ajustar el Random Forest con el conjunto de entrenamiento.
install.packages("randomForest")
library(randomForest)
classifier = randomForest(x = training_set[,-3],
y = training_set$Purchased,
ntree = 10)
install.packages("randomForest")
dataset = read.csv("Social_Network_Ads.csv")
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[,3:5]
#Codificar la variable a factor lo toma asi naiveBayes valores de 0 o 1
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Dividir los datos de entranamiento y testeo
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split=TRUE)
testing_set = subset(dataset, split = FALSE)
# Sin escalado de valores
#Ajustar el modelo
install.packages("randomForest")
library(randomForest)
classifier = randomForest(x = training_set[,-3],
y = training_set$Purchased,
ntree = 10)
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[,3:5]
#Codificar la variable a factor lo toma asi naiveBayes valores de 0 o 1
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Dividir los datos de entranamiento y testeo
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split=TRUE)
testing_set = subset(dataset, split = FALSE)
# Sin escalado de valores
#Ajustar el modelo
install.packages("randomForest")
library(randomForest)
classifier = randomForest(x = training_set[,-3],
y = training_set$Purchased,
ntree = 10)
install.packages("randomForest")
View(classifier)
y_pred = predict(classifier, newdata=testing_set[,-3])
classifier = randomForest(x = training_set[,-3],
y = training_set$Purchased,
ntree = 10)
library(randomForest)
classifier = randomForest(x = training_set[,-3],
y = training_set$Purchased,
ntree = 10)
y_pred = predict(classifier, newdata=testing_set[,-3])
y_pred
View(classifier)
#Matriz de confusion
cm = table(testing_set[,3],y_pred)
cm
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split=TRUE)
testing_set = subset(dataset, split = FALSE)
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Codificar la variable de clasificaciÃ³n como factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[,3:5]
#Codificar la variable a factor lo toma asi naiveBayes valores de 0 o 1
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Dividir los datos de entranamiento y testeo
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Sin escalado de valores
#Ajustar el modelo
#install.packages("randomForest")
library(randomForest)
classifier = randomForest(x = training_set[,-3],
y = training_set$Purchased,
ntree = 10)
#Predecir datos
y_pred = predict(classifier, newdata=testing_set[,-3])
#Matriz de confusion
cm = table(testing_set[,3],y_pred)
cm
#Reperesentacion del arbol de clasificacion
plot(classifier)
text(classifier)
classifier = randomForest(x = training_set[,-3],
y = training_set$Purchased,
ntree = 500)
y_pred = predict(classifier, newdata=testing_set[,-3])
cm = table(testing_set[,3],y_pred)
cm
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 1)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 500)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Arbol de decision aleatorio (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Arbol de decision aleatorio (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 1)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 500)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Arbol de decision aleatorio (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualizacion del conjunto de testing
set = testing_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 1)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 500)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Arbol de decision aleatorio (Conjunto de Testing)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
#Reperesentacion del arbol de clasificacion
plot(classifier)
text(classifier)
source('C:/Users/darub/Desktop/Machine Learning/machinelearning-az-master/datasets/Part 3 - Classification/Section 20 - Random Forest Classification/random forest classification david.R', echo=TRUE)
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[,3:5]
#Codificar la variable a factor lo toma asi naiveBayes valores de 0 o 1
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Dividir los datos de entranamiento y testeo
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Sin escalado de valores
#Ajustar el modelo
#install.packages("randomForest")
library(randomForest)
classifier = randomForest(x = training_set[,-3],
y = training_set$Purchased,
ntree = 100)
#Predecir datos
y_pred = predict(classifier, newdata=testing_set[,-3])
#Matriz de confusion
cm = table(testing_set[,3],y_pred)
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 1)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 500)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Arbol de decision aleatorio (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualizacion del conjunto de testing
set = testing_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 1)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 500)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Arbol de decision aleatorio (Conjunto de Testing)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
#Reperesentacion del arbol de clasificacion
plot(classifier)
text(classifier)
setwd("C:/Users/darub/Desktop/Machine Learning/machinelearning-az-master/datasets/Part 4 - Clustering/Section 24 - K-Means Clustering")
dataset = read.csv("Mall_Customers.csv")
View(dataset)
View(dataset)
View(dataset)
dataset = dataset[,4:5]
View(dataset)
dataset = read.csv("Mall_Customers.csv")
x = dataset[,4:5]
dataset = read.csv("Mall_Customers.csv")
x = dataset[,4:5]
# Metodo del codo
set.seed(123)
set.seed(6)
source('C:/Users/darub/Desktop/Machine Learning/machinelearning-az-master/datasets/Part 4 - Clustering/Section 24 - K-Means Clustering/kmeans david.R', echo=TRUE)
source('C:/Users/darub/Desktop/Machine Learning/machinelearning-az-master/datasets/Part 4 - Clustering/Section 24 - K-Means Clustering/kmeans david.R', echo=TRUE)
# Importar los datos
dataset = read.csv("Mall_Customers.csv")
X = dataset[, 4:5]
# MÃ©todo del codo
set.seed(6)
wcss = vector()
for (i in 1:10){
wcss[i] <- sum(kmeans(X, i)$withinss)
}
plot(1:10, wcss, type = 'b', main = "MÃ©todo del codo",
xlab = "NÃºmero de clusters (k)", ylab = "WCSS(k)")
# Aplicar el algoritmo de k-means con k Ã³ptimo
set.seed(29)
kmeans <- kmeans(X, 5, iter.max = 300, nstart = 10)
source('C:/Users/darub/Desktop/Machine Learning/machinelearning-az-master/datasets/Part 4 - Clustering/Section 24 - K-Means Clustering/kmeans david.R', echo=TRUE)
# Importar los datos
dataset = read.csv("Mall_Customers.csv")
x = dataset[,4:5]
# Metodo del codo
set.seed(6)
wcss = vector()
for (i in 1:10) {
wcss[i] = sum(kmeans(x, i, iter.max = 300)$withinss)
}
plot(1:10, wcss, type = 'b', main = "Metodo del codo",
xlab = "Numero de clusters (k)", ylab = "WCSS(k)")
#Aplicar el algoritmo de k-means con k optimo
set.seed(29)
kmeans = kmeans(x,5, iter.max = 300)
install.packages("cluster")
library(cluster)
View(kmeans)
View(kmeans)
kmeans$cluster
clusplot(x, kmeans$cluster, lines = 0, shade = TRUE,color = TRUE,
labels = 2, plotchar = FALSE, span = TRUE, main = "CLustering de clientes",
xlab ="Ingresos anuales", ylab = "Puntuacion (1-100)")
clusplot(x, kmeans$cluster, lines = 0, shade = TRUE,color = TRUE,
labels = 1, plotchar = FALSE, span = TRUE, main = "CLustering de clientes",
xlab ="Ingresos anuales", ylab = "Puntuacion (1-100)")
clusplot(x, kmeans$cluster, lines = 0, shade = TRUE,color = TRUE,
labels = 4, plotchar = FALSE, span = TRUE, main = "CLustering de clientes",
xlab ="Ingresos anuales", ylab = "Puntuacion (1-100)")
clusplot(x, kmeans$cluster, lines = 0, shade = TRUE,color = TRUE,
labels = 4, plotchar = FALSE, span = TRUE, main = "CLustering de clientes",
xlab ="Ingresos anuales", ylab = "Puntuacion (1-100)")
clusplot(x, kmeans$cluster, lines = 0, shade = TRUE,color = TRUE,
labels = 4, plotchar = FALSE, span = TRUE, main = "CLustering de clientes",
xlab ="Ingresos anuales", ylab = "Puntuacion (1-100)")
source('C:/Users/darub/Desktop/Machine Learning/machinelearning-az-master/datasets/Part 4 - Clustering/Section 24 - K-Means Clustering/kmeans.R', echo=TRUE)
source('C:/Users/darub/Desktop/Machine Learning/machinelearning-az-master/datasets/Part 4 - Clustering/Section 24 - K-Means Clustering/kmeans david.R', echo=TRUE)
source('C:/Users/darub/Desktop/Machine Learning/machinelearning-az-master/datasets/Part 4 - Clustering/Section 24 - K-Means Clustering/kmeans david.R', echo=TRUE)
source('C:/Users/darub/Desktop/Machine Learning/machinelearning-az-master/datasets/Part 4 - Clustering/Section 24 - K-Means Clustering/kmeans david.R', echo=TRUE)
